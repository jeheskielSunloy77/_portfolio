diff --git a/dist/vectorstores/astradb.cjs b/dist/vectorstores/astradb.cjs
index 192add0d5a5c340d60963aef51c80d5346154657..55e3f97eb492b1f523fe8cf65f9a076d89d59102 100644
--- a/dist/vectorstores/astradb.cjs
+++ b/dist/vectorstores/astradb.cjs
@@ -97,7 +97,7 @@ class AstraDBVectorStore extends vectorstores_1.VectorStore {
         });
         const { token, endpoint, collection, collectionOptions, namespace, idKey, contentKey, skipCollectionProvisioning, ...callerArgs } = args;
         const dataAPIClient = new astra_db_ts_1.DataAPIClient(token, { caller: ["langchainjs"] });
-        this.astraDBClient = dataAPIClient.db(endpoint, { namespace });
+        this.astraDBClient = dataAPIClient.db(endpoint, { keyspace:namespace });
         this.skipCollectionProvisioning = skipCollectionProvisioning ?? false;
         if (this.skipCollectionProvisioning && collectionOptions) {
             throw new Error("If 'skipCollectionProvisioning' has been set to true, 'collectionOptions' must not be defined");
diff --git a/dist/vectorstores/astradb.js b/dist/vectorstores/astradb.js
index 748040758fa67cf94db2c6ad2df3082cccee25ea..3605dd6b882727a9d31a850f1558454ae4435295 100644
--- a/dist/vectorstores/astradb.js
+++ b/dist/vectorstores/astradb.js
@@ -1,10 +1,10 @@
 /* eslint-disable @typescript-eslint/no-explicit-any */
-import * as uuid from "uuid";
 import { DataAPIClient, } from "@datastax/astra-db-ts";
-import { AsyncCaller, } from "@langchain/core/utils/async_caller";
 import { Document } from "@langchain/core/documents";
+import { AsyncCaller, } from "@langchain/core/utils/async_caller";
 import { maximalMarginalRelevance } from "@langchain/core/utils/math";
 import { VectorStore, } from "@langchain/core/vectorstores";
+import * as uuid from "uuid";
 export class AstraDBVectorStore extends VectorStore {
     _vectorstoreType() {
         return "astradb";
@@ -61,7 +61,7 @@ export class AstraDBVectorStore extends VectorStore {
         });
         const { token, endpoint, collection, collectionOptions, namespace, idKey, contentKey, skipCollectionProvisioning, ...callerArgs } = args;
         const dataAPIClient = new DataAPIClient(token, { caller: ["langchainjs"] });
-        this.astraDBClient = dataAPIClient.db(endpoint, { namespace });
+        this.astraDBClient = dataAPIClient.db(endpoint, { keyspace:namespace });
         this.skipCollectionProvisioning = skipCollectionProvisioning ?? false;
         if (this.skipCollectionProvisioning && collectionOptions) {
             throw new Error("If 'skipCollectionProvisioning' has been set to true, 'collectionOptions' must not be defined");
